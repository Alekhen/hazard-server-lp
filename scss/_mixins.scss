// SASS FUNCTIONS AND MIXINS

// Definition of the path from the compiled CSS files to the image files
@function imagePath($image) {
	@return '../images/' + $image;
}

// Used for adding either an inner shadow, drop shadow or both to an element
@mixin box-shadow($param1, $param2:null) {
	@if $param2 == null {
		-ms-box-shadow: $param1;
		-o-box-shadow: $param1;
		-moz-box-shadow: $param1;
		-webkit-box-shadow: $param1;
		box-shadow: $param1;
	} @else {
		-ms-box-shadow: $param1, $param2;
		-o-box-shadow: $param1, $param2;
		-moz-box-shadow: $param1, $param2;
		-webkit-box-shadow: $param1, $param2;
		box-shadow: $param1, $param2;
	}
}

// Used for adding an embossing effect - based upon the 'box-shadow' mixin
@mixin emboss($opacity1, $opacity2, $reverse:false) {
	@if $reverse == false {
		@include box-shadow(white($opacity1) 0 1px 0, inset black($opacity2) 0 1px 0);
	} @else {
		@include box-shadow(black($opacity2) 0 1px 0, inset white($opacity1) 0 1px 0);
	}
}

// Used for adding a letterpress effect
@mixin letterpress($opacity, $reverse:false, $dark:false) {
	@if $dark == false {
		@if $reverse == false {
			text-shadow: white($opacity) 0 1px 0;
		} @else {
			text-shadow: white($opacity) 0 -1px 0;
		}
	} @else {
		@if $reverse == false {
			text-shadow: black($opacity) 0 1px 0;
		} @else {
			text-shadow: black($opacity) 0 -1px 0;
		}
	}
}

// Used for hiding text in favor of displaying an image instead
@mixin hide-text {
	color: transparent;
	font: 0/0 a;
	text-shadow: none;
}

// Used for rearranging a list horizontally instead of using its vertical default
@mixin nav-list {
	list-style-type: none;
	padding: 0px;
	margin: 0px;
	overflow: hidden;
	> li {
		display: block;
		float: left;
		&:last-child {
			margin-right: 0px;
		}
	}
}

// Used for setting the font values of an element
// NOTE: Pixels only
@mixin font($fontSize:16, $lineHeight:null, $fontWeight:null, $fontFamily:null) {
	@if $lineHeight == null {
		font-size: $fontSize + px;
	} @else {
		@if $fontWeight == null {
			font-size: $fontSize + px;
			line-height: $lineHeight + px;
		} @else {
			@if $fontFamily == null {
				@if $fontWeight == inherit {
					font-size: $fontSize + px;
					line-height: $lineHeight + px;
				} @else {
					font-size: $fontSize + px;
					line-height: $lineHeight + px;
					font-weight: $fontWeight;
				}
			} @else {
				@if $fontWeight == inherit {
					font: $fontSize + px/$lineHeight + px $fontFamily;
				} @else {
					font: $fontWeight $fontSize + px/$lineHeight + px $fontFamily;
				}
			}
		}
	}
}

// Used as a shorthand for setting the display properties of an object
@mixin settings($position:null, $overflow:null, $display:null, $float:null) {
	@if $position == null {} @else {
		position: $position;
	}
	@if $overflow == null {} @else {
		overflow: $overflow;
	}
	@if $display == null {} @else {
		display: $display;
	}
	@if $float == null {} @else {
		float: $float;
	}
}

// Used as a shorthand for setting the width and height properties of an object
// NOTE: Pixels only
@mixin size($width:null, $height:null, $widthImportant:null, $heightImportant:null) {
	@if $width == null {} @else {
		@if $widthImportant == null {
			width: $width + px;
		} @else {
			width: $width + px !important;
		}
	}
	@if $height == null {} @else {
		@if $heightImportant == null {
			height: $height + px;
		} @else {
			height: $height + px !important;
		}
	}
}

// Used as a shorthand for setting the background of an element
@mixin bg($color:null, $image:null, $horiz:center, $vert:center, $repeat:no-repeat) {
	@if $color == null {
		background: url(#{imagePath($image)}) $horiz $vert $repeat;
	} @else {
		@if $image == null {
			background: $color;
		} @else {
			background: $color url(#{imagePath($image)}) $horiz $vert $repeat;
		}
	}
}

// Used for setting the background size to cover (aka. allowing the bg image to scale to fit the browser window)
@mixin bg-cover($color:null, $image:null, $horiz:center, $vert:center, $repeat:no-repeat) {
	@if $color == null {
		background: url(#{imagePath($image)}) $repeat $horiz $vert fixed;
		-o-background-size: cover;
		-moz-background-size: cover;
		-webkit-background-size: cover;
		background-size: cover;
		filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='.myBackground.jpg', sizingMethod='scale');
		-ms-filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='myBackground.jpg', sizingMethod='scale')";
	} @else {
		@if $image == null {
			background: $color;
		} @else {
			background: $color url(#{imagePath($image)}) $repeat $horiz $vert fixed;
			-o-background-size: cover;
			-moz-background-size: cover;
			-webkit-background-size: cover;
			background-size: cover;
			filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='.myBackground.jpg', sizingMethod='scale');
			-ms-filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='myBackground.jpg', sizingMethod='scale')";
		}
	}
}

// Used to specify unique border sizes to each side of an element
// NOTE: Pixels only
@mixin border-size-unique($topSize:1, $rightSize:1, $bottomSize:1, $leftSize:1, $weight:solid, $color:black) {
	border-top: $topSize + px $weight $color;
	border-right: $rightSize + px $weight $color;
	border-bottom: $bottomSize + px $weight $color;
	border-left: $leftSize + px $weight $color;
}

// Used to set the border radius of an element where all corners have the same radius (rounded corners)
// NOTE: Pixels only
@mixin border-radius($size) {
	-ms-border-radius: $size + px;
	-o-border-radius: $size + px;
	-moz-border-radius: $size + px;
	-webkit-border-radius: $size + px;
	border-radius: $size + px;
}

// Used to set the border radius of an element where all corners have uniqly specified radii (rounded corners)
@mixin border-radius-unique($topLeft:0, $topRight:0, $bottomRight:0, $bottomLeft:0) {
	-ms-border-top-left-radius: $topLeft + px;
	-ms-border-top-right-radius: $topRight + px;
	-ms-border-bottom-left-radius: $bottomLeft + px;
	-ms-border-bottom-right-radius: $bottomRight + px;
	-o-border-top-left-radius: $topLeft + px;
	-o-border-top-right-radius: $topRight + px;
	-o-border-bottom-left-radius: $bottomLeft + px;
	-o-border-bottom-right-radius: $bottomRight + px;
	-moz-border-top-left-radius: $topLeft + px;
	-moz-border-top-right-radius: $topRight + px;
	-moz-border-bottom-left-radius: $bottomLeft + px;
	-moz-border-bottom-right-radius: $bottomRight + px;
	-webkit-border-top-left-radius: $topLeft + px;
	-webkit-border-top-right-radius: $topRight + px;
	-webkit-border-bottom-left-radius: $bottomLeft + px;
	-webkit-border-bottom-right-radius: $bottomRight + px;
	border-top-left-radius: $topLeft + px;
	border-top-right-radius: $topRight + px;
	border-bottom-left-radius: $bottomLeft + px;
	border-bottom-right-radius: $bottomRight + px;
}

// Used to apply CSS3 transitions to elements
@mixin transition($speed:300, $easing:ease, $feature:all) {
	-ms-transition: $feature $speed + ms $easing;
	-o-transition: $feature $speed + ms $easing;
	-moz-transition: $feature $speed + ms $easing;
	-webkit-transition: $feature $speed + ms $easing;
	transition: $feature $speed + ms $easing;
}

// Used for moving an element vertically
@mixin skewY($degrees) {
	-ms-transform: skewY($degrees + deg);
	-o-transform: skewY($degrees + deg);
	-moz-transform: skewY($degrees + deg);
	-webkit-transform: skewY($degrees + deg);
	transform: skewY($degrees + deg);
}

// Used for modifying or removing default vender appearances - Defaults to 'none'
@mixin appearance($params:none) {
	-ms-appearance: $params;
	-o-appearance: $params;
	-moz-appearance: $params;
	-webkit-apperance: $params;
	appearance: $params;
}

// Used for quickly applying a CSS3 linear gradient to an element
@mixin linear-gradient($color1, $color2, $reverse:false) {
	@if $reverse == false {
		background: $color1;
		background: -moz-linear-gradient(top, $color1 0%, $color2 100%);
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $color1), color-stop(100%, $color2));
		background: -webkit-linear-gradient(top, $color1 0%, $color2 100%);
		background: -o-linear-gradient(top, $color1 0%, $color2 100%);
		background: -ms-linear-gradient(top, $color1 0%, $color2 100%);
		background: linear-gradient(to bottom, $color1 0%, $color2 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2', GradientType=0);
	} @else {
		background: $color2;
		background: -moz-linear-gradient(top, $color2 0%, $color1 100%);
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $color2), color-stop(100%, $color1));
		background: -webkit-linear-gradient(top, $color2 0%, $color1 100%);
		background: -o-linear-gradient(top, $color2 0%, $color1 100%);
		background: -ms-linear-gradient(top, $color2 0%, $color1 100%);
		background: linear-gradient(to bottom, $color2 0%, $color1 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color2', endColorstr='$color1', GradientType=0);
	}
}

// Used for quickly applying a CSS3 radial gradient to an element
@mixin radial-gradient($color1, $color2, $reverse:false) {
	@if $reverse == false {
		background: $color1;
		background: -moz-radial-gradient(center, ellipse cover, $color1 0%, $color2 100%);
		background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $color1), color-stop(100%, $color2));
		background: -webkit-radial-gradient(center, ellipse cover, $color1 0%, $color2 100%);
		background: -o-radial-gradient(center, ellipse cover, $color1 0%, $color2 100%);
		background: -ms-radial-gradient(center, ellipse cover, $color1 0%, $color2 100%);
		background: radial-gradient(ellipse at center, $color1 0%, $color2 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2', GradientType=1);
	} @else {
		background: $color2;
		background: -moz-radial-gradient(center, ellipse cover, $color2 0%, $color1 100%);
		background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $color2), color-stop(100%, $color1));
		background: -webkit-radial-gradient(center, ellipse cover, $color2 0%, $color1 100%);
		background: -o-radial-gradient(center, ellipse cover, $color2 0%, $color1 100%);
		background: -ms-radial-gradient(center, ellipse cover, $color2 0%, $color1 100%);
		background: radial-gradient(ellipse at center, $color2 0%, $color1 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color2', endColorstr='$color1', GradientType=1);
	}
}